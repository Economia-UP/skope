fill(Reference, Inflation, Expectation, .direction = "down")
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
colnames(series.df)[2:4] <- c("Tasa objetivo", "Inflación", "Inflación esperada")
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
?fill
series.df <- series.df %>%
dplyr::fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
series.df <- series.df %>%
dplyr::fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
library(tidyr)
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
View(series.df)
rm()
library("siebanxicor")
library(dplyr)
library(purrr)
library(tidyr)
# Define your INEGI API key
setToken("86d02771fd6b64ce29912469f70d872cf666627201a5d7e819a82c452ae61289")
# Fetch the data using the specified series IDs
idSeries <- c("SF61745", "SP30577","SR14194")
# Get the data
series <- getSeriesData(idSeries, '2010-01-01')
ref <- getSerieDataFrame(series, "SF61745")
inf <- getSerieDataFrame(series, "SP30578")
exp <- getSerieDataFrame(series, "SR14194")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
colnames(series.df)[2:4] <- c("Tasa objetivo", "Inflación", "Inflación esperada")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
rm(list=ls())
library("siebanxicor")
library(dplyr)
library(purrr)
library(tidyr)
# Define your INEGI API key
setToken("86d02771fd6b64ce29912469f70d872cf666627201a5d7e819a82c452ae61289")
# Fetch the data using the specified series IDs
idSeries <- c("SF61745", "SP30577","SR14194")
# Get the data
series <- getSeriesData(idSeries, '2010-01-01')
ref <- getSerieDataFrame(series, "SF61745")
inf <- getSerieDataFrame(series, "SP30578")
exp <- getSerieDataFrame(series, "SR14194")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
series.df <- reduce(c(ref, inf, exp), full_join, by = "date")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
# Get the data
series <- getSeriesData(idSeries, '2010-01-01')
ref <- getSerieDataFrame(series, "SF61745")
inf <- getSerieDataFrame(series, "SP30578")
exp <- getSerieDataFrame(series, "SR14194")
inf <- getSerieDataFrame(series, "SP30578")
inf <- getSerieDataFrame(series, "SP30577")
inf <- getSerieDataFrame(series, "SP30578")
# Load the necessary libraries
library(inegiR)
# Define your INEGI API key
inegi.api = '446548c3-7b55-4b22-8430-ac8f251ea555'
# Fetch the data using the specified series IDs
idSeries <- c("910406", "910407", "910410")  # Your INEGI series IDs
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
View(series)
inf <- inegi_series_multiple(series = "910406", token = inegi.api)
View(inf)
inf <- inegi_series_multiple(series = "910406", token = inegi.api) %>%
select(date, values)
exp <- getSerieDataFrame(series, "SR14194")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
View(inf)
View(series)
View(ref)
exp <- getSerieDataFrame(series, "SR14194")
# Fetch the data using the specified series IDs
idSeries <- c("SF61745", "SP30577","SR14194")
# Fetch the data using the specified series IDs
idSeries <- c("SF61745", "SP30578","SR14194")
# Get the data
series <- getSeriesData(idSeries, '2010-01-01')
ref <- getSerieDataFrame(series, "SF61745")
inf <- getSerieDataFrame(series, "SP30578")
inf <- getSerieDataFrame(series, "SP30578")
exp <- getSerieDataFrame(series, "SR14194")
series.df <- reduce(list(ref, inf, exp), full_join, by = "date")
colnames(series.df)[2:4] <- c("Tasa objetivo", "Inflación", "Inflación esperada")
View(series.df)
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down")
series.df <- series.df %>%
fill("Tasa objetivo", "Inflación", "Inflación esperada", .direction = "down") %>%
filter(date >= "2010-01-01")
# Specify the output directory and file name
output_dir <- "MX"
output_file <- file.path(output_dir, "mc_policy.csv")
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
write.csv(series.df, output_file, row.names = FALSE)
cat("Data successfully written to", output_file)
library(siebanxicor)
install.packages("fredr")
library(readxl)
library(readxl)
weights <- read_excel("C:/Users/ediaz/OneDrive - up.edu.mx/GitHub/skope/R/weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312")
View(weights)
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312")
setwd("C:/Users/ediaz/OneDrive - up.edu.mx/GitHub/skope/R/")
# Define your INEGI API key
inegi.api = '446548c3-7b55-4b22-8430-ac8f251ea555'
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312")
View(weights)
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312", na.rm = TRUE)
?read_excel
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort()
# Load the necessary libraries
library(inegiR)
library(dplyr)
library(tidyr)
library(readxl)
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by()
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by("Ponderador INPC")
?sort_by
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by("Ponderador INPC")
View(weights)
setwd("C:/Users/ediaz/OneDrive - up.edu.mx/GitHub/skope/R/")
# Define your INEGI API key
inegi.api = '446548c3-7b55-4b22-8430-ac8f251ea555'
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by("Ponderador INPC")
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312")
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by([-1])
# Load dfs
weights <- read_excel("weights.xlsx",
sheet = "Objeto de gasto", range = "A8:B312") %>%
sort_by(.[-1])
View(weights)
# Load dfs
weights <- read.csv("weights.csv")
View(weights)
# Fetch the data using the specified series IDs
idSeries <- c("910392")
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
View(series)
View(series)
series <- series %>%
select(date, values) %>%
rename(
date = date,
values = 'INPC',)
series <- series %>%
select(date, values) %>%
rename(
date = date,
values = 'INPC')
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = value)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = value)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values)
# Load dfs
weights <- read.csv("weights.csv") %>%
mutate_all(./100)
?mutate_all
# Load dfs
weights <- read.csv("weights.csv") %>%
mutate_all(~ . / 100)
View(weights)
View(weights)
# Load dfs
weights <- read.csv("weights.csv") %>%
mutate(~ Weight / 100)
# Load dfs
weights <- read.csv("weights.csv") %>%
mutate(Weight / 100)
# Load dfs
weights <- read.csv("weights.csv") %>%
summarise(Concept, Weight/100)
# Load dfs
weights <- read.csv("weights.csv") %>%
summarize(Concept, Weight/100)
# Load dfs
weights <- read.csv("weights.csv") %>%
reframe(Concept, Weight/100)
# Load dfs
weights <- read.csv("weights.csv") %>%
reframe(Concept, Weight = Weight/100)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
reframe(
date,
"Alimentos, bebidas y tabaco" = INPC*weights$Weight["Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
reframe(
date,
"Alimentos, bebidas y tabaco" = INPC*weights$Weight["Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
reframe(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights$Weight["Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
reframe(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights$Weight["Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values)
series <- series %>%
select(date, values) %>%
reframe(
date,
"Alimentos, bebidas y tabaco" = values*weights$Weight["Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = values*weights$Weight["Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights[Weight=="Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights[Weight=="Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights$Weight[Weight=="Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights$Weight[Weight=="Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*filter(weights, Weight == "Alimentos, bebidas y tabaco")
)
filter(weights, Weight == "Alimentos, bebidas y tabaco")
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*filter(weights, Concept == "Alimentos, bebidas y tabaco")
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = "INPC"*weights$Concept["Alimentos, bebidas y tabaco"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
date,
"Alimentos, bebidas y tabaco" = INPC*weights$Concept["Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
"Alimentos, bebidas y tabaco" = INPC*weights$Weight[Concept == "Alimentos, bebidas y tabaco"]
)
series <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
"Alimentos, bebidas y tabaco" = INPC*weights$Weight[weights$Concept == "Alimentos, bebidas y tabaco"]
)
View(series)
series.incidence <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
"Alimentos, bebidas y tabaco" = INPC*weights$Weight[weights$Concept == "Alimentos, bebidas y tabaco"],
"Ropa, calzado y accesorios" = INPC*weights$Weight[weights$Concept == "Ropa, calzado y accesorios"],
"Vivienda" = INPC*weights$Weight[weights$Concept == "Vivienda"],
"Muebles, aparatos y accesorios domésticos" = INPC*weights$Weight[weights$Concept == "Muebles, aparatos y accesorios domésticos"],
"Salud y cuidado personal" = INPC*weights$Weight[weights$Concept == "Salud y cuidado personal"],
"Transporte" = INPC*weights$Weight[weights$Concept == "Transporte"],
"Educación y esparcimiento" = INPC*weights$Weight[weights$Concept == "Educación y esparcimiento"],
"Otros servicios" = INPC*weights$Weight[weights$Concept == "Otros servicios"]
)
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series.incidence <- series %>%
select(date, values) %>%
rename(
date = date,
'INPC' = values) %>%
mutate(
"Alimentos, bebidas y tabaco" = INPC*weights$Weight[weights$Concept == "Alimentos, bebidas y tabaco"],
"Ropa, calzado y accesorios" = INPC*weights$Weight[weights$Concept == "Ropa, calzado y accesorios"],
"Vivienda" = INPC*weights$Weight[weights$Concept == "Vivienda"],
"Muebles, aparatos y accesorios domésticos" = INPC*weights$Weight[weights$Concept == "Muebles, aparatos y accesorios domésticos"],
"Salud y cuidado personal" = INPC*weights$Weight[weights$Concept == "Salud y cuidado personal"],
"Transporte" = INPC*weights$Weight[weights$Concept == "Transporte"],
"Educación y esparcimiento" = INPC*weights$Weight[weights$Concept == "Educación y esparcimiento"],
"Otros servicios" = INPC*weights$Weight[weights$Concept == "Otros servicios"]
)
View(series.df)
View(series.incidence)
setwd("C:/Users/ediaz/OneDrive - up.edu.mx/GitHub/skope/R/")
# Define your INEGI API key
inegi.api = '446548c3-7b55-4b22-8430-ac8f251ea555'
# Load dfs
weights <- read.csv("weights.csv") %>%
reframe(Concept, Weight = Weight/100)
# Fetch the data using the specified series IDs
idSeries <- c("910406")
# Get the data
series <- inegi_series_multiple(series = idSeries, token = inegi.api)
series.incidence <- series %>%
select(date, values) %>%
rename(
date = date,
'pi' = values) %>%
mutate(
"Alimentos, bebidas y tabaco" = pi*weights$Weight[weights$Concept == "Alimentos, bebidas y tabaco"],
"Ropa, calzado y accesorios" = pi*weights$Weight[weights$Concept == "Ropa, calzado y accesorios"],
"Vivienda" = pi*weights$Weight[weights$Concept == "Vivienda"],
"Muebles, aparatos y accesorios domésticos" = pi*weights$Weight[weights$Concept == "Muebles, aparatos y accesorios domésticos"],
"Salud y cuidado personal" = pi*weights$Weight[weights$Concept == "Salud y cuidado personal"],
"Transporte" = pi*weights$Weight[weights$Concept == "Transporte"],
"Educación y esparcimiento" = pi*weights$Weight[weights$Concept == "Educación y esparcimiento"],
"Otros servicios" = pi*weights$Weight[weights$Concept == "Otros servicios"]
)
ggplot2(series.incidence) +
geom_line()
library(ggplot2)
ggplot2(series.incidence) +
geom_line()
ggplot(series.incidence) +
geom_line()
plot(series.incidence)
# Load necessary libraries
library(zoo)      # For time series handling
library(lmtest)   # For the log-likelihood ratio test
library(tidyverse) # For data manipulation and visualization
# Load or simulate data
# Placeholder: Replace with actual data loading method
# Assume 'data' is a data frame with columns: 'date', 'inflation', 'unemployment_gap', and 'inflation_core'
# Parameters
sample_length <- 80  # Number of quarters in each rolling regression
# Prepare data (simulate example data here for illustration)
set.seed(42)
n <- 300  # Total number of quarters
data <- data.frame(
date = seq(as.Date("1960-01-01"), length = n, by = "quarter"),
inflation = rnorm(n, 0.02, 0.01),         # Placeholder inflation data
unemployment_gap = rnorm(n, 0, 0.02),      # Placeholder unemployment gap data
inflation_core = rnorm(n, 0.015, 0.008)    # Placeholder core inflation data
)
# Rolling regression function
run_rolling_regression <- function(y_var, x_vars, data, window) {
roll_results <- rollapply(data, width = window, FUN = function(sub_data) {
lm(as.formula(paste(y_var, "~", paste(x_vars, collapse = " + "))), data = sub_data)
}, by.column = FALSE, align = "right")
return(roll_results)
}
# Run rolling regressions
data$inflation_lag1 <- lag(data$inflation, -1)
# Load necessary libraries
library(zoo)      # For time series handling
library(lmtest)   # For the log-likelihood ratio test
library(tidyverse) # For data manipulation and visualization
# Load or simulate data
# Placeholder: Replace with actual data loading method
# Assume 'data' is a data frame with columns: 'date', 'inflation', 'unemployment_gap', and 'inflation_core'
# Parameters
sample_length <- 80  # Number of quarters in each rolling regression
# Prepare data (simulate example data here for illustration)
set.seed(42)
n <- 300  # Total number of quarters
data <- data.frame(
date = seq(as.Date("1960-01-01"), length = n, by = "quarter"),
inflation = rnorm(n, 0.02, 0.01),         # Placeholder inflation data
unemployment_gap = rnorm(n, 0, 0.02),      # Placeholder unemployment gap data
inflation_core = rnorm(n, 0.015, 0.008)    # Placeholder core inflation data
)
# Rolling regression function
run_rolling_regression <- function(y_var, x_vars, data, window) {
roll_results <- rollapply(data, width = window, FUN = function(sub_data) {
lm(as.formula(paste(y_var, "~", paste(x_vars, collapse = " + "))), data = sub_data)
}, by.column = FALSE, align = "right")
return(roll_results)
}
# Run rolling regressions
data$inflation_lag1 <- lag(data$inflation, 1)
data$inflation_lag2 <- lag(data$inflation, 2)
data$inflation_lag3 <- lag(data$inflation, 3)
data$inflation_lag4 <- lag(data$inflation, 4)
# Headline Inflation Regression
headline_models <- run_rolling_regression("inflation", c("inflation_lag1", "inflation_lag2", "inflation_lag3", "inflation_lag4", "unemployment_gap"), data, sample_length)
